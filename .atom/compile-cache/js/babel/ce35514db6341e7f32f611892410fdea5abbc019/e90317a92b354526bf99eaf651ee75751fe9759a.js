Object.defineProperty(exports, '__esModule', {
  value: true
});

var _secureJs = require('./secure.js');

'use babel';

var _require = require('electron');

var shell = _require.shell;

// Add detail information in error notification
// Uncaught SyntaxError: Unexpected token  in JSON at position 0 #44
// https://github.com/h3imdall/ftp-remote-edit/issues/44
var throwErrorIssue44 = function throwErrorIssue44(e, password) {
  var passwordHash = atom.config.get('ftp-remote-edit.password');
  var configHash = atom.config.get('ftp-remote-edit.config');
  var config = (0, _secureJs.decrypt)(password, configHash);

  var regularExpression = /^[a-zA-Z0-9]+$/;
  var detail = {
    config: {
      decrypt: config !== null
    },
    password: {
      exists: password.length > 0,
      length: password.length,
      alphanumeric: regularExpression.test(password)
    }
  };

  console.error('Detail Error Information');
  console.info('Uncaught SyntaxError: Unexpected token  in JSON at position 0 #44');
  console.info('https://github.com/h3imdall/ftp-remote-edit/issues/44');

  console.warn('password:');
  console.log('password:', password);
  console.log('password exists:', detail.password.exists);
  console.log('password length:', detail.password.length);
  console.log('password alphanumeric:', detail.password.alphanumeric);

  console.warn('hash:');
  console.log('password hash:', passwordHash);
  console.log('config hash:', configHash);

  console.warn('config:');
  console.log('config:', config);

  atom.notifications.addError(e.message, {
    detail: e.message,
    stack: e.stack,
    dismissable: true,
    buttons: [{
      text: 'View Issue',
      onDidClick: function onDidClick() {
        shell.openExternal('https://github.com/h3imdall/ftp-remote-edit/issues/44');
      }
    }],
    description: 'The error was thrown from the ftp-remote-edit package. The error has already been reported in issue on github and a solution is being worked on. You can help by adding information to this issue. Please explain what actions triggered this error.'
  });
};
exports.throwErrorIssue44 = throwErrorIssue44;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2FuYW5tYXlqYWluLy5hdG9tL3BhY2thZ2VzL2Z0cC1yZW1vdGUtZWRpdC9saWIvaGVscGVyL2lzc3VlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7d0JBRXdCLGFBQWE7O0FBRnJDLFdBQVcsQ0FBQzs7ZUFHTSxPQUFPLENBQUMsVUFBVSxDQUFDOztJQUE3QixLQUFLLFlBQUwsS0FBSzs7Ozs7QUFLTixJQUFNLGlCQUFpQixHQUFHLFNBQXBCLGlCQUFpQixDQUFJLENBQUMsRUFBRSxRQUFRLEVBQUs7QUFDaEQsTUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUMvRCxNQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzNELE1BQUksTUFBTSxHQUFHLHVCQUFRLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQzs7QUFFM0MsTUFBSSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUN6QyxNQUFJLE1BQU0sR0FBRztBQUNYLFVBQU0sRUFBRTtBQUNOLGFBQU8sRUFBRyxNQUFNLEtBQUssSUFBSSxBQUFDO0tBQzNCO0FBQ0QsWUFBUSxFQUFFO0FBQ1IsWUFBTSxFQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxBQUFDO0FBQzdCLFlBQU0sRUFBRSxRQUFRLENBQUMsTUFBTTtBQUN2QixrQkFBWSxFQUFFLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDL0M7R0FDRixDQUFDOztBQUVGLFNBQU8sQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUMxQyxTQUFPLENBQUMsSUFBSSxDQUFDLG9FQUFvRSxDQUFDLENBQUM7QUFDbkYsU0FBTyxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDOztBQUV0RSxTQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFCLFNBQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ25DLFNBQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxTQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEQsU0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUVwRSxTQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RCLFNBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDNUMsU0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDLENBQUM7O0FBRXhDLFNBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRS9CLE1BQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7QUFDckMsVUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPO0FBQ2pCLFNBQUssRUFBRSxDQUFDLENBQUMsS0FBSztBQUNkLGVBQVcsRUFBRSxJQUFJO0FBQ2pCLFdBQU8sRUFBRSxDQUFDO0FBQ1IsVUFBSSxFQUFFLFlBQVk7QUFDbEIsZ0JBQVUsRUFBRSxzQkFBTTtBQUNoQixhQUFLLENBQUMsWUFBWSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7T0FDN0U7S0FDRixDQUFDO0FBQ0YsZUFBVyxFQUFFLHNQQUFzUDtHQUNwUSxDQUFDLENBQUM7Q0FDSixDQUFBIiwiZmlsZSI6Ii9ob21lL2FuYW5tYXlqYWluLy5hdG9tL3BhY2thZ2VzL2Z0cC1yZW1vdGUtZWRpdC9saWIvaGVscGVyL2lzc3VlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5cbmltcG9ydCB7IGRlY3J5cHQgfSBmcm9tICcuL3NlY3VyZS5qcyc7XG5jb25zdCB7IHNoZWxsIH0gPSByZXF1aXJlKCdlbGVjdHJvbicpXG5cbi8vIEFkZCBkZXRhaWwgaW5mb3JtYXRpb24gaW4gZXJyb3Igbm90aWZpY2F0aW9uXG4vLyBVbmNhdWdodCBTeW50YXhFcnJvcjogVW5leHBlY3RlZCB0b2tlbiBcdTAwMDIgaW4gSlNPTiBhdCBwb3NpdGlvbiAwICM0NFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2gzaW1kYWxsL2Z0cC1yZW1vdGUtZWRpdC9pc3N1ZXMvNDRcbmV4cG9ydCBjb25zdCB0aHJvd0Vycm9ySXNzdWU0NCA9IChlLCBwYXNzd29yZCkgPT4ge1xuICBsZXQgcGFzc3dvcmRIYXNoID0gYXRvbS5jb25maWcuZ2V0KCdmdHAtcmVtb3RlLWVkaXQucGFzc3dvcmQnKTtcbiAgbGV0IGNvbmZpZ0hhc2ggPSBhdG9tLmNvbmZpZy5nZXQoJ2Z0cC1yZW1vdGUtZWRpdC5jb25maWcnKTtcbiAgbGV0IGNvbmZpZyA9IGRlY3J5cHQocGFzc3dvcmQsIGNvbmZpZ0hhc2gpO1xuXG4gIGxldCByZWd1bGFyRXhwcmVzc2lvbiA9IC9eW2EtekEtWjAtOV0rJC87XG4gIGxldCBkZXRhaWwgPSB7XG4gICAgY29uZmlnOiB7XG4gICAgICBkZWNyeXB0OiAoY29uZmlnICE9PSBudWxsKSxcbiAgICB9LFxuICAgIHBhc3N3b3JkOiB7XG4gICAgICBleGlzdHM6IChwYXNzd29yZC5sZW5ndGggPiAwKSxcbiAgICAgIGxlbmd0aDogcGFzc3dvcmQubGVuZ3RoLFxuICAgICAgYWxwaGFudW1lcmljOiByZWd1bGFyRXhwcmVzc2lvbi50ZXN0KHBhc3N3b3JkKVxuICAgIH1cbiAgfTtcblxuICBjb25zb2xlLmVycm9yKCdEZXRhaWwgRXJyb3IgSW5mb3JtYXRpb24nKTtcbiAgY29uc29sZS5pbmZvKCdVbmNhdWdodCBTeW50YXhFcnJvcjogVW5leHBlY3RlZCB0b2tlbiBcdTAwMDIgaW4gSlNPTiBhdCBwb3NpdGlvbiAwICM0NCcpO1xuICBjb25zb2xlLmluZm8oJ2h0dHBzOi8vZ2l0aHViLmNvbS9oM2ltZGFsbC9mdHAtcmVtb3RlLWVkaXQvaXNzdWVzLzQ0Jyk7XG5cbiAgY29uc29sZS53YXJuKCdwYXNzd29yZDonKTtcbiAgY29uc29sZS5sb2coJ3Bhc3N3b3JkOicsIHBhc3N3b3JkKTtcbiAgY29uc29sZS5sb2coJ3Bhc3N3b3JkIGV4aXN0czonLCBkZXRhaWwucGFzc3dvcmQuZXhpc3RzKTtcbiAgY29uc29sZS5sb2coJ3Bhc3N3b3JkIGxlbmd0aDonLCBkZXRhaWwucGFzc3dvcmQubGVuZ3RoKTtcbiAgY29uc29sZS5sb2coJ3Bhc3N3b3JkIGFscGhhbnVtZXJpYzonLCBkZXRhaWwucGFzc3dvcmQuYWxwaGFudW1lcmljKTtcblxuICBjb25zb2xlLndhcm4oJ2hhc2g6Jyk7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZCBoYXNoOicsIHBhc3N3b3JkSGFzaCk7XG4gIGNvbnNvbGUubG9nKCdjb25maWcgaGFzaDonLCBjb25maWdIYXNoKTtcblxuICBjb25zb2xlLndhcm4oJ2NvbmZpZzonKTtcbiAgY29uc29sZS5sb2coJ2NvbmZpZzonLCBjb25maWcpO1xuXG4gIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihlLm1lc3NhZ2UsIHtcbiAgICBkZXRhaWw6IGUubWVzc2FnZSxcbiAgICBzdGFjazogZS5zdGFjayxcbiAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICBidXR0b25zOiBbe1xuICAgICAgdGV4dDogJ1ZpZXcgSXNzdWUnLFxuICAgICAgb25EaWRDbGljazogKCkgPT4ge1xuICAgICAgICBzaGVsbC5vcGVuRXh0ZXJuYWwoJ2h0dHBzOi8vZ2l0aHViLmNvbS9oM2ltZGFsbC9mdHAtcmVtb3RlLWVkaXQvaXNzdWVzLzQ0Jyk7XG4gICAgICB9XG4gICAgfV0sXG4gICAgZGVzY3JpcHRpb246ICdUaGUgZXJyb3Igd2FzIHRocm93biBmcm9tIHRoZSBmdHAtcmVtb3RlLWVkaXQgcGFja2FnZS4gVGhlIGVycm9yIGhhcyBhbHJlYWR5IGJlZW4gcmVwb3J0ZWQgaW4gaXNzdWUgb24gZ2l0aHViIGFuZCBhIHNvbHV0aW9uIGlzIGJlaW5nIHdvcmtlZCBvbi4gWW91IGNhbiBoZWxwIGJ5IGFkZGluZyBpbmZvcm1hdGlvbiB0byB0aGlzIGlzc3VlLiBQbGVhc2UgZXhwbGFpbiB3aGF0IGFjdGlvbnMgdHJpZ2dlcmVkIHRoaXMgZXJyb3IuJyxcbiAgfSk7XG59XG4iXX0=